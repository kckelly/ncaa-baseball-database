"""
File containing helper methods for contacting the postgres database.
"""
import os
import sys

import psycopg2


def connect():
    """
    Connect to the database and return the connection generated by psycopg2.
    
    :return: the connection
    """
    try:
        connection = psycopg2.connect(user=os.getenv('NCAABaseballUser'),
                                      password=os.getenv('NCAABaseballPassword'),
                                      host='localhost',
                                      port=5432,
                                      database='ncaa_baseball')
        return connection
    except psycopg2.Error as error:
        print("Error while connecting to ncaa_baseball, make sure your environment variables are "
              "set properly", error)
        sys.exit(1)


def get_year_info(year):
    """
    Get the ids for the year specified.
    
    :param year: the year to get the ids of
    :return: a dict containing the year_id, hitting_id, pitching_id, and fielding_id for that year
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT year_id, hitting_id, pitching_id, fielding_id '
                   'FROM year_info '
                   'WHERE year={year}'.format(year=year))
    ids = list(cursor.fetchone())
    connection.close()
    return {'year_id': ids[0], 'hitting_id': ids[1], 'pitching_id': ids[2], 'fielding_id': ids[3]}


def get_default_conference_id():
    """
    Get the id of the default conference from the conference table.
    :return: the id of the default conference
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id '
                   'FROM conference '
                   'WHERE conference.name = \'{conference_name}\';'.format(conference_name='Other'))
    conference_id = cursor.fetchone()[0]
    connection.close()
    return conference_id


def get_all_conferences():
    """
    Get all conferences from the database.
    
    :return: a list of conference dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, name, division '
                   'FROM conference;')
    conferences = []
    for row in cursor:
        conferences.append({'id': row[0], 'name': row[1], 'division': row[2]})
    connection.close()
    return conferences


def get_all_schools():
    """
    Get all schools from the database.

    :return: a list of school dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, ncaa_id, name '
                   'FROM school;')
    schools = []
    for row in cursor:
        schools.append({'id': row[0], 'ncaa_id': row[1], 'name': row[2]})
    connection.close()
    return schools


def get_all_stadiums():
    """
    Get all stadiums from the database.
    :return: a list of stadium dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, name '
                   'FROM stadium;')
    stadiums = []
    for row in cursor:
        stadiums.append({'id': row[0], 'name': row[1]})
    connection.close()
    return stadiums


def get_all_coaches():
    """
    Get all coaches from the database.
    :return: a list of coach dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, ncaa_id, first_name, last_name '
                   'FROM coach;')
    coaches = []
    for row in cursor:
        coaches.append({'id': row[0], 'ncaa_id': row[1], 'first_name': row[2], 'last_name': row[3]})
    connection.close()
    return coaches


def get_all_teams():
    """
    Get all teams from the database.
    :return: a list of team dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, year, conference_id, school_id, coach_id, stadium_id '
                   'FROM team;')
    teams = []
    for row in cursor:
        teams.append({'id':        row[0], 'year': row[1], 'conference_id': row[2],
                      'school_id': row[3],
                      'coach_id':  row[4], 'stadium_id': row[4]})
    connection.close()
    return teams


def get_all_team_info():
    """
    Gets all team information from the database, including conference info, school info,
    coach info, and stadium info.
    :return: a list of team information dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT team.id, team.year, '
                   '       conference.id, conference.name, conference.division, '
                   '       school.id, school.ncaa_id, school.name, school.nickname, school.url, '
                   '       coach.id, coach.ncaa_id, coach.first_name, coach.last_name, '
                   '           coach.alma_mater, coach.year_graduated, '
                   '       stadium.id, stadium.name, stadium.capacity, stadium.year_built '
                   'FROM team '
                   '    JOIN conference ON team.conference_id = conference.id '
                   '    JOIN school ON team.school_id = school.id '
                   '    LEFT JOIN coach ON team.coach_id = coach.id '
                   '    LEFT JOIN stadium ON team.stadium_id = stadium.id;')
    teams = []
    for row in cursor:
        teams.append({'team_id':              row[0], 'year': row[1],
                      'conference_id':        row[2], 'conference_name': row[3], 'division': row[4],
                      'school_id':            row[5], 'school_ncaa_id': row[6],
                      'school_name':          row[7],
                      'school_nickname':      row[8], 'school_url': row[9],
                      'coach_id':             row[10], 'coach_ncaa_id': row[11],
                      'coach_first_name':     row[12],
                      'coach_last_name':      row[11], 'coach_alma_mater': row[12],
                      'coach_year_graduated': row[13],
                      'stadium_id':           row[14], 'stadium_name': row[15],
                      'stadium_capacity':     row[16],
                      'stadium_year_built':   row[17]})
    connection.close()
    return teams


def get_all_players():
    """
    Get all players from the database.
    :return: a list of player dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, ncaa_id, first_name, last_name '
                   'FROM player;')
    players = []
    for row in cursor:
        players.append({'player_id': row[0], 'ncaa_id': row[1], 'first_name': row[2],
                        'last_name': row[3]})
    connection.close()
    return players


def get_all_roster_info():
    """
    Get all roster information from the database, joins the player table.
    :return: A list of roster dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT roster.id, roster.team_id, roster.player_id, roster.class, '
                   'player.ncaa_id, player.first_name, player.last_name, team.year '
                   'FROM roster '
                   '    JOIN player ON roster.player_id = player.id '
                   '    JOIN team ON roster.team_id = team.id;')
    roster_rows = []
    for row in cursor:
        roster_rows.append({'roster_id': row[0], 'team_id': row[1], 'player_id': row[2],
                            'class':     row[3], 'ncaa_id': row[4], 'first_name': row[5],
                            'last_name': row[6], 'year': row[7]})
    connection.close()
    return roster_rows


def get_all_game_info():
    """
    Get all games in the game table.
    :return: a list of game dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, ncaa_id, away_team_id, home_team_id, date, location, attendance '
                   'FROM game;')
    games = []
    for row in cursor:
        games.append({'id': row[0], 'ncaa_id': row[1], 'away_team_id': row[2], 'home_team_id':
                            row[3], 'date': row[4], 'location': row[5], 'attendance': row[6]})
    connection.close()
    return games


def get_all_innings():
    """
    Get all inning run totals in the database.
    :return: a list of inning dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT game_id, team_id, inning, runs '
                   'FROM inning')
    innings = []
    for row in cursor:
        innings.append({'game_id': row[0], 'team_id': row[1], 'inning': row[2], 'runs': row[3]})
    connection.close()
    return innings


def get_all_game_position_info():
    """
    Get all game position relations from the game_position table.
    :return: a list of gamae position dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT game_id, roster_id, position '
                   'FROM game_position;')
    game_positions = []
    for row in cursor:
        game_positions.append({'game_id': row[0], 'roster_id': row[1], 'position': row[2]})
    connection.close()
    return game_positions


def get_all_box_score_lines(stat_type):
    """
    Get all box score lines from the stat_type_line table of this stat type.
    :param stat_type: the stat type of this table (hitting, pitching, or fielding)
    :return: a list of box score line lists with game_id and roster_id in positions 0 and 1
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT * '
                   'FROM {stat_type}_line'.format(stat_type=stat_type))
    box_score_lines = []
    for row in cursor:
        box_score_lines.append(row)
    connection.close()
    return box_score_lines

def get_all_umpires():
    """
    Get all umpires from the database.
    :return: a list of umpire dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id, first_name, last_name '
                   'FROM umpire;')
    umpires = []
    for row in cursor:
        umpires.append({'id': row[0], 'first_name': row[1], 'last_name': row[2]})
    connection.close()
    return umpires


def get_all_game_umpires():
    """
    Get all game umpire relations from the database.
    :return: a dict of game ids to a dict of umpire ids corresponding to hp, 1b, 2b, 3b, lf, and rf
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT game_id, umpire_id, position '
                   'FROM game_umpire;')
    
    game_umpires = {}
    for row in cursor:
        if row[0] not in game_umpires:
            game_umpires.update({row[0]: {'hp': None, '1b': None, '2b': None, '3b': None,
                                          'lf': None, 'rf': None}})
        game_umpires[row[0]][row[2]] = row[1]
    
    connection.close()
    return game_umpires


def get_all_play_by_play():
    """
    Get all play by play text and information from the database.
    :return: a list of play by play dicts
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT game_id, team_id, inning, ord, text, pitches '
                   'FROM play_by_play;')
    pbp = []
    for row in cursor:
        pbp.append({'game_id': row[0], 'team_id': row[1], 'inning': row[2], 'ord': row[3],
                    'text':    row[4], 'pitches': row[5]})
    connection.close()
    return pbp


def copy_expert(table_string, file_name):
    """
    Copy a file to the database.
    :param table_string: the table to copy to, including column names if applicable in the format
    table_name(column1, column2)
    :param file_name: the name of the csv file to copy
    :return: None
    """
    connection = connect()
    
    cursor = connection.cursor()
    
    cursor.copy_expert("COPY {table_string} from STDIN delimiter ',' NULL AS '' "
                       "CSV HEADER".format(table_string=table_string), open(file_name))
    connection.commit()
    
    connection.close()


def create_team(year, school_ncaa_id):
    """
    Insert a team that is not already in the database, usually from a school that is NAIA.This
    method gives the team a generic conference called 'Other', which will be changed if a
    matching team is scraped and added later.
    :param year: the year of this team
    :param school_ncaa_id: the ncaa id of the school
    :return: the id of the newly created team
    """
    connection = connect()
    cursor = connection.cursor()
    cursor.execute('SELECT id '
                   'FROM school '
                   'WHERE ncaa_id = {ncaa_id}'.format(ncaa_id=school_ncaa_id))
    school_id = cursor.fetchone()[0]
    cursor.execute('INSERT INTO team(year, conference_id, school_id) '
                   'VALUES({year}, {conference_id}, {school_id}) '
                   'RETURNING id;'.format(year=year, conference_id=get_default_conference_id(),
                                          school_id=school_id))
    team_id = cursor.fetchone()[0]
    
    connection.commit()
    
    connection.close()
    return team_id
